name: Frontend CI + Deploy (S3/CloudFront)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: frontend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Playwright + Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run tests with coverage
        env:
          CI: true
        run: npm run test:coverage

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload Playwright raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload NYC coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/
          if-no-files-found: ignore
          retention-days: 7

      - name: Update coverage badge
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc curl
          coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
          color=$(echo "$coverage < 80" | bc | awk '{if ($1) print "red"; else print "green"}')
          curl -s -X POST "https://pizza-factory.cs329.click/api/badge/${{ secrets.NET_ID }}/jwtpizzacoverage?label=Coverage&value=${coverage}%25&color=$color" \
            -H "authorization: bearer ${{ secrets.FACTORY_API_KEY }}"

  build:
    name: Build (Vite)
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Set version.json (for footer)
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s" }' "$version" > public/version.json

      - name: Build
        run: |
          npm ci
          npm run build
          # Remove GitHub Pages 404 hack â€“ CloudFront handles routing now
          rm -f dist/404.html || true

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/

  deploy:
    name: Deploy to AWS S3 + CloudFront
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write 
      contents: read
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.build.outputs.version }}
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/jwt-pizza-frontend-ci

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: dist/

      - name: Deploy to S3 and Invalidate CloudFront
        run: |
          echo "Deploying version $version"
          aws s3 cp dist s3://${{ secrets.APP_BUCKET }} --recursive
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"
